geom_point() +
labs(x = "Samples",
y = "Shannon Index"
title = "Alpha diversity for 16S AVSs of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
##### Plot alpha diversity #####
##########################################################################################
# 16s AVSs =================================
# Plot all samples separately
ggplot(surface_alpha_diversity_asv16s, aes(x=sample_name, y=Shannon))+
geom_point() +
labs(x = "Samples",
y = "Shannon Index",
title = "Alpha diversity for 16S AVSs of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot average alpha diversity per cycle-day
ggplot(surface_alpha_diversity_asv16s, aes(x=ATTRIBUTE_Location, y=Chao1))+
geom_boxplot() +
labs(x = "Samples",
title = "Average Alpha diversity (Shannon) per cycle-day for 16S AVSs of Surface Samples") +
theme(title = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot average alpha diversity per cycle-day
ggplot(surface_alpha_diversity_asv16s, aes(x=ATTRIBUTE_Location, y=Shannon))+
geom_boxplot() +
labs(x = "Samples",
y = "Shannon Index",
title = "Average Alpha diversity (Shannon) per cycle-day for 16S AVSs of Surface Samples") +
theme(title = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# 18s AVSs =================================
# Plot all samples separately
ggplot(surface_alpha_diversity_asv18s, aes(x=sample_name, y=Shannon))+
geom_point() +
labs(x = "Samples",
y = "Shannon Index",
title = "Alpha diversity (Shannon) for 18S AVSs of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
##### Read metabolites data #####
##########################################################################################
# Load data
metabolites <- getDataFromTable("Metabolites_Feature Table.csv", vars_toDrop_beg = 2, vars_toDrop_end = 0)
# Convert char variables into numeric without loosing DF structure
metabolites <- convert_all_cols_to_numeric(metabolites)
metabolites <- metabolites * 100000
metabolites <- mutate_all(metabolites, round)
metabolites <- mutate_if(metabolites, is.numeric, list(~ifelse(is_less_than_value(., 10), 0, .)))
View(metabolites)
# Extract surface samples in cycle-day-depth order
surface_metabolites <- metabolites[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_metabolites) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_metabolites <- get_alpha_diversity(dataframe = surface_metabolites, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
View(surface_alpha_diversity_metabolites)
# Metabolites =================================
# Plot all samples separately
ggplot(surface_alpha_diversity_metabolites, aes(x=sample_name, y=Shannon))+
geom_point() +
labs(x = "Samples",
y = "Shannon Index",
title = "Alpha diversity (Shannon) for Metabolites of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot average alpha diversity per cycle-day
ggplot(surface_alpha_diversity_metabolites, aes(x=ATTRIBUTE_Location, y=Shannon))+
geom_boxplot() +
labs(x = "Samples",
y = "Shannon Index",
title = "Average Alpha diversity (Shannon) per cycle-day for Metabolites of Surface Samples") +
theme(title = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
##### MDS/PCoA of surface samples using BrayCurtis distance #####
##########################################################################################
# 16s AVSs =================================
surface_bray_asv16s <- vegan::vegdist(surface_asv16s, method = "bray")
surface_bray_asv16s
surface_bray_pcoa_asv16s <- ecodist::pco(surface_bray_asv16s)
surface_bray_pcoa_df_asv16s <- data.frame(pcoa1 = surface_bray_pcoa_asv16s$vectors[,1],
pcoa2 = surface_bray_pcoa_asv16s$vectors[,2],
cycle = metadata_surface$ATTRIBUTE_Filament_Possition)
bray_pcoa_asv16s <- ggplot(data = surface_bray_pcoa_df_asv16s, aes(x=pcoa1, y=pcoa2, label = surface_alpha_diversity_asv16s$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of surface samples using BrayCurtis distance on 16S AVSs") +
theme(title = element_text(size = 8))
bray_pcoa_asv16s
# Metabolites =================================
surface_bray_metabolites <- vegan::vegdist(surface_metabolites, method = "bray")
surface_bray_metabolites
surface_bray_pcoa_metabolites <- ecodist::pco(surface_bray_metabolites)
surface_bray_pcoa_df_metabolites <- data.frame(pcoa1 = surface_bray_pcoa_metabolites$vectors[,1],
pcoa2 = surface_bray_pcoa_metabolites$vectors[,2],
cycle = metadata_surface$ATTRIBUTE_Filament_Possition)
bray_pcoa_metabolites <- ggplot(data = surface_bray_pcoa_df_metabolites, aes(x=pcoa1, y=pcoa2, label = metadata_surface$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of surface samples using BrayCurtis distance on metabolites") +
theme(title = element_text(size = 8))
bray_pcoa_metabolites
# Set working directory
setwd("C:/Users/marce/Documents/Repos/coding_task/data")
source("C:/Users/marce/Documents/Repos/coding_task/code/helper_functions.R")
##### Read and set up metadata DataFrame #####
##########################################################################################
metadata <- getDataFromTable("Metadata.csv", vars_toDrop_beg = 0, vars_toDrop_end = 10)
# Convert ATTRIBUTE_Depth to numeric
metadata <-transform(metadata, ATTRIBUTE_Depth = as.numeric(ATTRIBUTE_Depth))
# Create new variable (sample_name) that includes cycle + day + depth information
metadata <- mutate(metadata, sample_name = paste(ATTRIBUTE_Location, ATTRIBUTE_Depth, sep = "_"))
# Select only surface samples (Depth <= 30)
metadata_surface <- metadata %>%
transform(ATTRIBUTE_Depth = as.numeric(ATTRIBUTE_Depth)) %>%
filter(ATTRIBUTE_Depth_Range == "0-30") %>%
arrange(ATTRIBUTE_Location, ATTRIBUTE_Depth)
# Load data
asv_16s <- getDataFromTable("ASV_16S.csv", vars_toDrop_beg = 0, vars_toDrop_end = 8)
# Convert char variables into numeric without loosing DF structure
asv_16s <- convert_all_cols_to_numeric(asv_16s)
# Extract surface samples in cycle-day-depth order
surface_asv16s <- asv_16s[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_asv16s) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_asv16s <- get_alpha_diversity(dataframe = surface_asv16s, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
View(surface_alpha_diversity_asv16s)
# 18s AVSs =================================
# Load data
asv_18s <- getDataFromTable("ASV_18SV9.csv", vars_toDrop_beg = 0, vars_toDrop_end = 10)
# Convert char variables into numeric without loosing DF structure
asv_18s <- convert_all_cols_to_numeric(asv_18s)
# Extract surface samples in cycle-day-depth order
surface_asv18s <- asv_18s[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_asv18s) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_asv18s <- get_alpha_diversity(dataframe = surface_asv18s, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
View(surface_alpha_diversity_asv18s)
##### Read metabolites data #####
##########################################################################################
# Load data
metabolites <- getDataFromTable("Metabolites_Feature Table.csv", vars_toDrop_beg = 2, vars_toDrop_end = 0)
# Convert char variables into numeric without loosing DF structure
metabolites <- convert_all_cols_to_numeric(metabolites)
metabolites <- metabolites * 100000
metabolites <- mutate_all(metabolites, round)
metabolites <- mutate_if(metabolites, is.numeric, list(~ifelse(is_less_than_value(., 10), 0, .)))
# Extract surface samples in cycle-day-depth order
surface_metabolites <- metabolites[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_metabolites) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_metabolites <- get_alpha_diversity(dataframe = surface_metabolites, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
# Set working directory
setwd("C:/Users/marce/Documents/Repos/coding_task/data")
source("C:/Users/marce/Documents/Repos/coding_task/code/helper_functions.R")
##### Read and set up metadata DataFrame #####
##########################################################################################
metadata <- getDataFromTable("Metadata.csv", vars_toDrop_beg = 0, vars_toDrop_end = 10)
# Convert ATTRIBUTE_Depth to numeric
metadata <-transform(metadata, ATTRIBUTE_Depth = as.numeric(ATTRIBUTE_Depth))
# Create new variable (sample_name) that includes cycle + day + depth information
metadata <- mutate(metadata, sample_name = paste(ATTRIBUTE_Location, ATTRIBUTE_Depth, sep = "_"))
# Select only surface samples (Depth <= 30)
metadata_surface <- metadata %>%
transform(ATTRIBUTE_Depth = as.numeric(ATTRIBUTE_Depth)) %>%
filter(ATTRIBUTE_Depth_Range == "0-30") %>%
arrange(ATTRIBUTE_Location, ATTRIBUTE_Depth)
# Load data
asv_16s <- getDataFromTable("ASV_16S.csv", vars_toDrop_beg = 0, vars_toDrop_end = 8)
# Convert char variables into numeric without loosing DF structure
asv_16s <- convert_all_cols_to_numeric(asv_16s)
# Extract surface samples in cycle-day-depth order
surface_asv16s <- asv_16s[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_asv16s) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_asv16s <- get_alpha_diversity(dataframe = surface_asv16s, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
# 18s AVSs =================================
# Load data
asv_18s <- getDataFromTable("ASV_18SV9.csv", vars_toDrop_beg = 0, vars_toDrop_end = 10)
# Convert char variables into numeric without loosing DF structure
asv_18s <- convert_all_cols_to_numeric(asv_18s)
# Extract surface samples in cycle-day-depth order
surface_asv18s <- asv_18s[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_asv18s) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_asv18s <- get_alpha_diversity(dataframe = surface_asv18s, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
##### Read metabolites data #####
##########################################################################################
# Load data
metabolites <- getDataFromTable("Metabolites_Feature Table.csv", vars_toDrop_beg = 2, vars_toDrop_end = 0)
# Convert char variables into numeric without loosing DF structure
metabolites <- convert_all_cols_to_numeric(metabolites)
metabolites <- metabolites * 100000
metabolites <- mutate_all(metabolites, round)
metabolites <- mutate_if(metabolites, is.numeric, list(~ifelse(is_less_than_value(., 10), 0, .)))
# Extract surface samples in cycle-day-depth order
surface_metabolites <- metabolites[row.names(metadata_surface),]
# Check samples are in same order
row.names(surface_metabolites) == row.names(metadata_surface)
# Get dataframe with metadata and chao1 index information to plot
surface_alpha_diversity_metabolites <- get_alpha_diversity(dataframe = surface_metabolites, metadata_df = metadata_surface, useful_metadata_cols = c("ATTRIBUTE_Location", "sample_name", "ATTRIBUTE_Filament_Possition"))
##### Plot alpha diversity #####
##########################################################################################
# 16s AVSs =================================
# Plot all samples separately
ggplot(surface_alpha_diversity_asv16s, aes(x=sample_name, y=Shannon))+
geom_point() +
labs(x = "Samples",
y = "Shannon Index",
title = "Alpha diversity (Shannon) for 16S AVSs of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot average alpha diversity per cycle-day
ggplot(surface_alpha_diversity_asv16s, aes(x=ATTRIBUTE_Location, y=Shannon))+
geom_boxplot() +
labs(x = "Samples",
y = "Shannon Index",
title = "Average Alpha diversity (Shannon) per cycle-day for 16S AVSs of Surface Samples") +
theme(title = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# 18s AVSs =================================
# Plot all samples separately
ggplot(surface_alpha_diversity_asv18s, aes(x=sample_name, y=Shannon))+
geom_point() +
labs(x = "Samples",
y = "Shannon Index",
title = "Alpha diversity (Shannon) for 18S AVSs of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot average alpha diversity per cycle-day
ggplot(surface_alpha_diversity_asv18s, aes(x=ATTRIBUTE_Location, y=Shannon))+
geom_boxplot() +
labs(x = "Samples",
y = "Shannon Index",
title = "Average Alpha diversity (Shannon) per cycle-day for 18S AVSs of Surface Samples") +
theme(title = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Metabolites =================================
# Plot all samples separately
ggplot(surface_alpha_diversity_metabolites, aes(x=sample_name, y=Shannon))+
geom_point() +
labs(x = "Samples",
y = "Shannon Index",
title = "Alpha diversity (Shannon) for Metabolites of Surface Samples") +
theme(title = element_text(size = 10),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Plot average alpha diversity per cycle-day
ggplot(surface_alpha_diversity_metabolites, aes(x=ATTRIBUTE_Location, y=Shannon))+
geom_boxplot() +
labs(x = "Samples",
y = "Shannon Index",
title = "Average Alpha diversity (Shannon) per cycle-day for Metabolites of Surface Samples") +
theme(title = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
##### MDS/PCoA of surface samples using BrayCurtis distance #####
##########################################################################################
# 16s AVSs =================================
surface_bray_asv16s <- vegan::vegdist(surface_asv16s, method = "bray")
surface_bray_asv16s
surface_bray_pcoa_asv16s <- ecodist::pco(surface_bray_asv16s)
surface_bray_pcoa_df_asv16s <- data.frame(pcoa1 = surface_bray_pcoa_asv16s$vectors[,1],
pcoa2 = surface_bray_pcoa_asv16s$vectors[,2],
cycle = metadata_surface$ATTRIBUTE_Filament_Possition)
bray_pcoa_asv16s <- ggplot(data = surface_bray_pcoa_df_asv16s, aes(x=pcoa1, y=pcoa2, label = surface_alpha_diversity_asv16s$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of surface samples using BrayCurtis distance on 16S AVSs") +
theme(title = element_text(size = 8))
bray_pcoa_asv16s
bray_pcoa_asv16s
# 18s AVSs =================================
surface_bray_asv18s <- vegan::vegdist(surface_asv18s, method = "bray")
surface_bray_asv18s
surface_bray_pcoa_asv18s <- ecodist::pco(surface_bray_asv18s)
surface_bray_pcoa_df_asv18s <- data.frame(pcoa1 = surface_bray_pcoa_asv18s$vectors[,1],
pcoa2 = surface_bray_pcoa_asv18s$vectors[,2],
cycle = metadata_surface$ATTRIBUTE_Filament_Possition)
bray_pcoa_asv18s <- ggplot(data = surface_bray_pcoa_df_asv18s, aes(x=pcoa1, y=pcoa2, label = surface_alpha_diversity_asv18s$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of surface samples using BrayCurtis distance on 18S AVSs") +
theme(title = element_text(size = 8))
bray_pcoa_asv18s
# Metabolites =================================
surface_bray_metabolites <- vegan::vegdist(surface_metabolites, method = "bray")
surface_bray_metabolites
surface_bray_pcoa_metabolites <- ecodist::pco(surface_bray_metabolites)
surface_bray_pcoa_df_metabolites <- data.frame(pcoa1 = surface_bray_pcoa_metabolites$vectors[,1],
pcoa2 = surface_bray_pcoa_metabolites$vectors[,2],
cycle = metadata_surface$ATTRIBUTE_Filament_Possition)
bray_pcoa_metabolites <- ggplot(data = surface_bray_pcoa_df_metabolites, aes(x=pcoa1, y=pcoa2, label = metadata_surface$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of surface samples using BrayCurtis distance on metabolites") +
theme(title = element_text(size = 8))
bray_pcoa_metabolites
##### MDS/PCoA of all samples using BrayCurtis distance #####
##########################################################################################
# 16s AVSs =================================
all_bray_16s <- vegan::vegdist(asv_16s, method = "bray")
all_bray_16s
all_bray_pcoa_16s <- ecodist::pco(all_bray_16s)
all_bray_pcoa_df_16s <- data.frame(pcoa1 = all_bray_pcoa_16s$vectors[,1],
pcoa2 = all_bray_pcoa_16s$vectors[,2],
cycle = metadata$ATTRIBUTE_Filament_Possition)
all_bray_plot_16s <- ggplot(data = all_bray_pcoa_df_16s, aes(x=pcoa1, y=pcoa2, label = metadata$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of all samples using BrayCurtis distance on 16S AVSs") +
theme(title = element_text(size = 8))
all_bray_plot_16s
# 18s AVSs =================================
all_bray_18s <- vegan::vegdist(asv_18s, method = "bray")
all_bray_18s
all_bray_pcoa_18s <- ecodist::pco(all_bray_18s)
all_bray_pcoa_df_18s <- data.frame(pcoa1 = all_bray_pcoa_18s$vectors[,1],
pcoa2 = all_bray_pcoa_18s$vectors[,2],
cycle = metadata$ATTRIBUTE_Filament_Possition)
all_bray_plot_18s <- ggplot(data = all_bray_pcoa_df_18s, aes(x=pcoa1, y=pcoa2, label = metadata$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of all samples using BrayCurtis distance on 18S AVSs") +
theme(title = element_text(size = 8))
all_bray_plot_18s
# Metabolites =================================
# Extract samples present in ASVs tables
metabolites <- metabolites[row.names(asv_16s),]
all_bray_metabolites <- vegan::vegdist(metabolites, method = "bray")
all_bray_metabolites
all_bray_pcoa_metabolites <- ecodist::pco(all_bray_metabolites)
all_bray_pcoa_df_metabolites <- data.frame(pcoa1 = all_bray_pcoa_metabolites$vectors[,1],
pcoa2 = all_bray_pcoa_metabolites$vectors[,2],
cycle = metadata$ATTRIBUTE_Filament_Possition)
all_bray_plot_metabolites <- ggplot(data = all_bray_pcoa_df_metabolites, aes(x=pcoa1, y=pcoa2, label = metadata$sample_name, colour = cycle)) +
geom_point() +
geom_text(size = 2, nudge_x = 0.005, nudge_y = 0.005, angle = 45) +
geom_hline(yintercept=0) +
geom_vline(xintercept = 0) +
labs(x = "PCoA1",
y = "PCoA2",
title = "PCoA of all samples using BrayCurtis distance on metabolites") +
theme(title = element_text(size = 8))
all_bray_plot_metabolites
cor_table <- cor(asv_16s, metabolites)
View(cor_table)
cor_table <- cor(asv_16s, metabolites, method = "pearson")
View(cor_table)
View(asv_16s)
View(metabolites)
row.names(asv_16s) == row.names(metabolites)
View(cor_table)
# Converting rownames to column 1
cor_table_df <- as.data.frame(cor_table)
View(cor_table_df)
dXm <- cbind(rownames(cor_table_df), data.frame(cor_table_df, row.names=NULL))
View(dXm)
colnames(adXm)[1] <- "species"
colnames(dXm)[1] <- "species"
View(dXm)
dXm <- cbind(rownames(cor_table_df), data.frame(cor_table_df, row.names=NULL))
colnames(dXm)[1] <- "species"
View(cor_table_df)
dXm_g <- gather(dXm, key = "compound", value = "correlation")
dXm_g <- tidyr::gather(dXm, key = "compound", value = "correlation")
View(dXm_g)
library("dplyr")
library("corrplot")
library("vegan")
library("tidyr")
source("C:/Users/marce/Desktop/microbiome-help/microbiome_helper_functions.R")
# Read Data
####################################################################################
alta_diversidad <- read.csv("C:/Users/marce/OneDrive/DiversidadH2/2_resultados/altad_otu_table.csv", row.names = 1)
metabolite_data <- read.csv("C:/Users/marce/OneDrive/DiversidadH2/2_resultados/metabolite_data.csv", row.names = 1)
# Read Data
####################################################################################
alta_diversidad <- read.csv("C:/Users/marce/OneDrive/Sci/DiversidadH2/2_resultados/altad_otu_table.csv", row.names = 1)
# Read Data
####################################################################################
alta_diversidad <- read.csv("C:/Users/marce/OneDrive/Sci/DiversidadH2/Análisis/2_resultados/altad_otu_table.csv", row.names = 1)
View(alta_diversidad)
metabolite_data <- read.csv("C:/Users/marce/OneDrive/Sci/DiversidadH2/Análisis/2_resultados/metabolite_data.csv", row.names = 1)
View(metabolite_data)
heatmap(cor_table)
heatmap(cor_table[0:100, 0:100])
corrplot::corrplot(cor_table[0:100, 0:100])
library(igraph)
network <- graph_from_adjacency_matrix(cor_table[0:100, 0:100], weighted=T, mode="undirected", diag=F)
plot(network)
plot(network)
network <- graph_from_adjacency_matrix(cor_table[0:100, 0:100])
plot(network)
cor_table[0:100, 0:100]
cor.matriz <- cor_table[0:100, 0:100]
cor.matrix <- cor_table[0:100, 0:100]
nNodes <- ncol(cor.matrix$r) + nrow(cor.matrix$r)
cor.matrix <- corr.test(asv_16s,metabolites, method = "pearson")
cor.matrix <- psych::corr.test(asv_16s,metabolites, method = "pearson")
install.packages("psych")
cor.matrix <- psych::corr.test(asv_16s,metabolites, method = "pearson")
install.packages("tmvnsim")
install.packages("psych")
cor.matrix <- psych::corr.test(asv_16s,metabolites, method = "pearson")
cor.matrix <- psych::corr.test(asv_16s[0:71, 0:100],metabolites[0:71, 0:100], method = "pearson")
cor.matrix
nNodes <- ncol(cor.matrix$r) + nrow(cor.matrix$r)
nodeNames <- c(colnames(cor.matrix$r), rownames(cor.matrix$r))
adj <- matrix(0, nNodes, nNodes, dimnames=list(nodeNames, nodeNames))
adj[(ncol(cor.matrix$r)+1):nrow(adj), 1:ncol(cor.matrix$r)] <- cor.matrix$r
adj[1:ncol(cor.matrix$r), (ncol(cor.matrix$r)+1):ncol(adj)] <- t(cor.matrix$r)
View(adj)
graph.f<-graph.adjacency(cor.matrix$r, weighted=TRUE, mode="upper")
plot (graph.f, vertex.size=5, vertex.shape="circle", vertex.label.color="red", vertex.label=t.names, vertex.label.cex=0.9, edge.width=1, layout=layout.fruchterman.reingold)
plot(graph.f)
graph.f<-graph.adjacency(cor.matrix$r)
plot(graph.f)
plot(graph.f, vertex.size=5, vertex.shape="circle")
View(cor.matrix)
View(adj)
graph.f<-graph_from_adjacency_matrix(cor.matrix$r, weighted=TRUE, mode="upper")
plot(graph.f, vertex.size=5, vertex.shape="circle")
View(graph.f)
cor.matrix$r
nNodes <- ncol(cor_table[0:100, 0:100]) + nrow(cor_table[0:100, 0:100])
nodeNames <- c(colnames(cor_table[0:100, 0:100]), rownames(cor_table[0:100, 0:100]))
adj <- matrix(0, nNodes, nNodes, dimnames=list(nodeNames, nodeNames))
adj[(ncol(cor_table[0:100, 0:100])+1):nrow(adj), 1:ncol(cor_table[0:100, 0:100])] <- cor.matrix$r
adj[1:ncol(cor_table[0:100, 0:100]), (ncol(cor_table[0:100, 0:100])+1):ncol(adj)] <- t(cor_table[0:100, 0:100])
graph.f<-graph_from_adjacency_matrix(cor_table[0:100, 0:100], weighted=TRUE, mode="upper")
plot(graph.f, vertex.size=5, vertex.shape="circle")
plot(graph.f)
plot(graph.f)
plot(graph.f)
cor.matrix
cor.matrix <- cor.matrix[0:100, 0:100]
nNodes <- ncol(cor.matrix$r) + nrow(cor.matrix$r)
nodeNames <- c(colnames(cor.matrix$r), rownames(cor.matrix$r))
adj <- matrix(0, nNodes, nNodes, dimnames=list(nodeNames, nodeNames))
adj[(ncol(cor.matrix$r)+1):nrow(adj), 1:ncol(cor.matrix$r)] <- cor.matrix$r
adj[1:ncol(cor.matrix$r), (ncol(cor.matrix$r)+1):ncol(adj)] <- t(cor.matrix$r)
graph.f<-graph_from_adjacency_matrix(cor_table[0:100, 0:100], weighted=TRUE, mode="upper")
plot(graph.f)
graph.f<-graph.adjacency(cor.matrix$r, weighted=TRUE, mode="upper")
plot(graph.f)
##########
network <- graph_from_adjacency_matrix(cor_table, weighted=T, mode="undirected", diag=F)
plot(network)
##########
network <- graph_from_adjacency_matrix(cor_table[0:100, 0:100], weighted=T, mode="undirected", diag=F)
plot(network)
##########
network <- graph_from_adjacency_matrix(cor_table[0:100, 0:100], weighted=F, mode="undirected", diag=F)
cor_table[0:100, 0:100]
network <- graph_from_adjacency_matrix(cor_table[0:30, 0:30], weighted=T, mode="undirected", diag=F)
plot(network)
##### Correlation between 16s AVSs and metabolites #####
##########################################################################################
# Check thath rowns in both DFs are the same
row.names(asv_16s) == row.names(metabolites)
cor_table <- cor(asv_16s, metabolites, method = "pearson")
heatmap(cor_table[0:100, 0:100])
cor_table_small <- cor_table[0:100, 0:100]
heatmap(cor_table_small)
test3 <- data.frame(row=rownames(cor_table_small)[row(cor_table_small)], col=colnames(cor_table_small)[col(cor_table_small)], corr=c(cor_table_small))
View(test3)
test_graph <- graph(test3)
network <- graph_from_incidence_matrix(cor_table_small)
plot(network)
View(test3)
View(asv_16s)
View(bray_pcoa_asv16s)
View(surface_asv16s)
View(asv_18s)
View(surface_alpha_diversity_asv18s)
View(surface_alpha_diversity_asv18s)
View(surface_asv18s)
View(metabolites)
View(surface_metabolites)
